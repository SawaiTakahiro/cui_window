/*
	2016/02/02
	振り返りスクリプトのリメイク。
	いろいろ使ってやり直してみる
*/

＃データの中身（ソースファイルの中身）
！日付						= 0
！場所						= 1
！レース					= 2
！クラス					= 3
！芝ダート					= 4
！距離						= 5
！馬番						= 6
！馬名						= 7
！タイム型マイニング予測値	= 8
！タイム型予測順位			= 9
！対戦型マイニング予測値	= 10
！対戦型予測順位			= 11
！確定順位					= 12

＃作業用の仮データ
＃実際にはクリップボードのを読んだり、適当に出力したCSVを使うかも
ソースファイルは、「sample_data.csv」

CSVデータは、ソースファイルを読む。

/*
今のファイルの中身
これに、振り返りのテキストを作るデータも足す

0	2016/1/31	＠日付
1	東京		＠場所
2	1			＠レース番号
3	未勝利・牝	＠レース名
4	ダ			＠区分
5	1400		＠距離
6	1			＠馬番
7	アッキー	＠馬名
8	89.34		＠タイム型予測値
9	9			＠タイム型順位
10	60			＠対戦型予測値
11	6			＠対戦型順位
12	4			＠着順

なでしこでのハッシュの書き方
http://nadesi.com/doc/reference/syntax/1-4-array.htm
//*/

/*
振り返りで使っているほうのデータ
こっちも一度に処理できるように付け加える

0	2016/1/31	＠日付
1	東京		＠場所
2	未勝利		＠クラス
3	1			＠レース番号
4	未勝利・牝	＠レース名
5	ダ			＠区分
6	1400		＠距離
7	5			＠馬番
8	 ストライクショット	＠馬名
9	1			＠人気
10	170			＠払戻金額
11	1			＠着順
12	87.28		＠タイム型予測値
13	1			＠タイム型順位
14	75			＠対戦型予測値
15	1			＠対戦型予測値

//*/


＃なでしこだと、CSVを二次元配列で取得できる機能がある
開催データは、CSVデータを表CSV変換。


/*
メモ：
	最悪の場合、元の生成するスクリプトはそのままにして
	このスクリプトで「必要になるCSVファイルを用意するだけ」にしちゃう
	
	今、実際の運用だと２つファイルを出力して別々に加工しているのを、
	１つのファイルを出力して実行するだけで処理できるようにする
//*/

＃グラフを作成するためのデータを用意する
グラフ用データとは配列。

i = 0
グラフ用データは、グラフ用データのiに列データ取得（開催データ、日付）を表列挿入。

i = i + 1
グラフ用データは、グラフ用データのiに列データ取得（開催データ、場所）を表列挿入。

i = i + 1
グラフ用データは、グラフ用データのiに列データ取得（開催データ、レース）を表列挿入。

i = i + 1
グラフ用データは、グラフ用データのiに列データ取得（開催データ、クラス）を表列挿入。

i = i + 1
グラフ用データは、グラフ用データのiに列データ取得（開催データ、芝ダート）を表列挿入。

i = i + 1
グラフ用データは、グラフ用データのiに列データ取得（開催データ、距離）を表列挿入。

i = i + 1
グラフ用データは、グラフ用データのiに列データ取得（開催データ、馬番）を表列挿入。

i = i + 1
グラフ用データは、グラフ用データのiに列データ取得（開催データ、馬名）を表列挿入。

i = i + 1
グラフ用データは、グラフ用データのiに列データ取得（開催データ、タイム型マイニング予測値）を表列挿入。

i = i + 1
グラフ用データは、グラフ用データのiに列データ取得（開催データ、タイム型予測順位）を表列挿入。

i = i + 1
グラフ用データは、グラフ用データのiに列データ取得（開催データ、対戦型マイニング予測値）を表列挿入。

i = i + 1
グラフ用データは、グラフ用データのiに列データ取得（開催データ、対戦型予測順位）を表列挿入。

i = i + 1
グラフ用データは、グラフ用データのiに列データ取得（開催データ、確定順位）を表列挿入。

グラフ用データを言う。
終わる。

●列データ取得（データ、カラム番号）
	データのカラム番号を表列取得で戻る。
